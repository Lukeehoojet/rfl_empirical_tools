Text 1:
> Are Android Binder and the NVMe driver reimplementations of earlier C drivers?  
 
FWICT: yes. 
 
FYI, there was a talk about the NVMerustdriver atLinuxPlumbers '22 - might contain some more info and possible answers to your other question: 
 
slides:  https://lpc.events/event/16/contributions/1180/attachment...  
 
video:  https://www.youtube.com/watch?v=BwywU1MqW38
-------------------------------
Text 2:
User-modeLinux(on x86-64 systems) now supports code written inRust.
-------------------------------
Text 3:
Heiseinterviews
Miguel Ojedaabout theRust-for-Linuxproject.
-------------------------------
Text 4:
linuxType "help", "copyright", "credits" or "license" for more information.
>>> import datetime as dt
>>> epoch = dt.datetime(1970, 1, 1, 0, 0, 0, tzinfo=dt.timezone.utc)
>>> print(epoch)
1970-01-01 00:00:00+00:00
>>> print(epoch + dt.timedelta(microseconds=(2**63 - 1) // 1000))
2262-04-11 23:47:16.854775+00:00
>>> print(epoch - dt.timedelta(microseconds=(2**63) // 1000))
1677-09-21 00:12:43.145225+00:00
>>> # For comparison:
>>> print(epoch + dt.timedelta(seconds=(2**31 - 1)))
2038-01-19 03:14:07+00:00
>>> print(epoch + dt.timedelta(seconds=(2**32 - 1)))
2106-02-07 06:28:15+00:00
>>> print(epoch + dt.timedelta(seconds=(2**63 - 1)))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
OverflowError: Python int too large to convert to C int
>>> print(dt.datetime.max)
9999-12-31 23:59:59.999999
 
 Sure, 2262 is a long time in the future. But it's not so absurdly far into the future that you won't eventually have compatibility problems (unlike the Python max datetime, which
-------------------------------
Text 5:
Rustin the   async_iter   submodule. However, a major downside of it is that in its current form it is scheduled to become a carbon-copy of the existing  std::iter  crate, with the only difference being that most functions and closures will be prefixed with the  async  keyword. That's a lot of duplication which needs to be maintained, just because because we wanted an async version of one interface. And it's likely at some point the stdlib will want to provide its own version of async  TcpStream , async  File , etc. - and that would result in an enormous amount of duplicate APIs which would largely be identical to their non-async counterparts. 

 And the problems don't just stop with  async  either. Have you ever wondered why you can't just use the  ?  operator from a closure? Or have you seen theRustforLinux
-------------------------------
Text 6:
Rustand now Ada are using to solve handling of dynamic memory issues) were, initially, invented by mathematicians and adopted by GC-based functional languages. Not to manage memory, but to manage external resources (in that case “they would be freed but we have no idea when, precisely” is bad answer).Rustdiscovery (as with  TMP  it was discovered, not designed into the language from beginning) was surprising and somewhat startling and it's not even mathematical fact, but a social one: if you give people an easy-to-use affine type system then they can solve almost all practical memory handling problems without GC, just with a small amount of  unsafe  code. 

 It's still not clear whether you can  rewrite piecemeal  any old code with similar results (which is whatLinux
-------------------------------
Text 7:
teaching aren't really about the language being used.Rustgetting immense credibility from its use inLinuxis very real though. You'd be able to tell your students "it's used byLinuxnow" and folks in the workforce will be able to tell their managers the same.
-------------------------------
Text 8:
Linuxdistributions provide that. 

 Yes. At the cost of making it unable to use anything up-to-date. Bad for end-users (coz games and most productivity software), bad for developers (coz up-to-date versions of everything are never there). 

 It's not even clear whether that's a win for security (certainly no one inRust
-------------------------------
Text 9:
rust. Then I saw a presentation at thelinuxplumbers conference about how they want to ease maintenence by using the rustc compiler crates for things like the borrow checker (once they can actually compile those). 
 
How independent are two compilers when they share implementation of core parts like the borrow
-------------------------------
Text 10:
Rustfrontend in GCC that can re-use those plugins: 
 
 > As the source of the GCC plugin infrastructure in theLinuxkernel and nearly all of the GCC plugins adapted for inclusion in the upstreamLinuxkernel, we too immediately spotted the importance of this problem and set out to ensure
-------------------------------
Text 11:
I can't help thinking it's got something to do withRustcode popping up in theLinuxkernel. Isn't GCC still the primary C compiler for the kernel? Would be nice if it could be the primaryRustcompiler as well.
-------------------------------
Text 12:
Rustyet" are probably less extensive than you think. For example, a new network QoS, filesystem, or LSM, basically anything new and optional would be fair game. That may not fit your definition of "core", but to many people it does, so it's worth noting thatRustisn't just for drivers. 
 
On the other hand, any rewrite of existing C code will need a very strong justification, and will probably remain "just an alternate implementation" for a long time. 
 
What willRustactually be used for in mainline remains a wait-and-see affair. It's great to see enthusiastic reports like this one, but it'll also be interesting to read some neutral and maybe negative feedback. 
 
It'll be a long time before there's a push forRustin actual core irreplaceableLinux
-------------------------------
Text 13:
Linuxcode inRustso long as the set of architectures considered first class forLinuxisn't a subset of the architectures which at least work in practice (lets say at least Tier 3 support) forRust. 
 This is one of the big motivations for both gccrustfront
-------------------------------
Text 14:
Linuxcode inRustso long as the set of architectures considered first class forLinuxisn't a subset of the architectures which at least work in practice (lets say at least Tier 3 support) forRust. This is because in effect such core code would mean nowLinux
-------------------------------
Text 15:
Yeah, I am skeptical aboutLinuxdevelopers migrating in flock toRustfor core code, but for drivers it's a slam dunk.
-------------------------------
Text 16:
wrote  in early October thatRustis "not likely to infuseLinuxwith a much-needed boost in its contributor base, becauseLinuxhas no such need" (among other negative comments). 
 
If other developers too find thatRustis so much easier for driver development, its use could explode very rapidly.
-------------------------------
Text 17:
Rustdoesn't have Either in it's  stdlib . There are  either crate  with  really featureful Either , and it's  widely used , but from my understandingLinuxkernel doesn't like to depend on external crates.
-------------------------------
Text 18:
Construction, and I can tell you that this is mostly wrong. There is no obvious relation betweenRustand the Calculus of Construction (which is about dependent types, no linear types), and the subarctic blog you cite is wrong. This also has no relevance to theLinuxkernel or string types whatsoever.
-------------------------------
Text 19:
Rustinfrastructure that has been posted in the past, including complete drivers; it's just not being pushed upstream yet.  I've been fairly deliberately looking closely at the code as it heads toward the mainline just because it breaks the problem down into manageable pieces.  The wholeRust-for-Linux
-------------------------------
Text 20:
string, one can't do some useful patterns like having a single allocated "buffer" used in a loop without allocating/freeing.  The equivalent ofRust's String is really things like https://developer-old.gnome.org/glib/stable/glib-Strings.html 
(I'd assume there's some variant of this in thelinuxkernel?  But not seeing it offhand)
-------------------------------
Text 21:
As can be seen, these patches are slowly building the in-kernelRustcode
up so that real functionality can be implemented inRust, but this process
has some ground to cover yet.  It's not clear whether moreRustcode will
be proposed for 6.2, or whether this is the full set.  The pace of change
may seem slow to developers who would like to start doing real work inRust, but it does have the advantage of moving in steps that can be
understood — and reviewed — by the kernel community.  TheRust-for-Linuxwork has been underway for a few years already; getting up to full
functionality may well take a while longer yet.
-------------------------------
Text 22:
Rustdevelopment process: when a new version ofRustis released with such new features (which do hopefully make code more readable), is theRustStandard Library simultaneously updated to use these new features? 

 No. It's similar toLinuxKernel process: first some foundational code lands, then things which
-------------------------------
Text 23:
Rustnot because of C deficiency but because kernel developers actively don't want to have it. And if they don't want want to have it then it wouldn't exist. 

 How canRustlanguage properties may affect that? 

 > I expect something like that from this imaginary framework. Driver code is the same for different kernels, framework knows all of kernels, actual binary representation changes wildly accordingly for kernel whims. 

 And what would happen when that magic would, finally, be stretched too far and fail?  That  is what Linus fights against:  
 Because I  know  that I will eventually make changes that break modules. And I want people to expect them, and I never EVER want to see an email in my mailbox that says "Damn you, Linus, I used this binary module for over two years, and it worked perfectly across 150 kernel releases, andLinux
-------------------------------
Text 24:
Rustcalls such magic a "langitem" as in "language item". If you made your own my::Drop trait with a drop(&mut self) function anybody can implement that on their types if they want, and anybody can call that drop() method on values of those types, yet it won't de-allocate anything, won't happen automatically, it just has a misleading name, like the artwork "An Oak Tree". But the langitem deliberately cannot be called by people explicitly (that's a compile error), and it will get called automatically by the language when items of that type are about to be destroyed. 
 
So logically this code happens because the kernel is destroying this value, ifLinux
-------------------------------
Text 25:
Rustis merged into the kernel  now  is specifically because something like that is just not possible.  Kernel is very explicit and vocal about that : all kernel APIs are unstable and there are no stability guarantees. 

 > If I need to put few bits into GPIO and create few entries for /sys, why should I dive deep into kernel build details? 

 If your needs are so modest then why do you even need kernel driver in the first place?Linux
-------------------------------
Text 26:
Rustsupport will be disabled silently. 
This behaves the same as when using a config file that has compiler-dependent support enabled which is not supported by your compiler (e.g. UBSAN_TRAP, see `git grep "\$(" -- "*Kconf*"' for more). 
 
I guess that's fair enough for an experimental feature that is not yet supported on all architectures? 
 
Note that personally, I never run "make oldconfig", but always use my "linux
-------------------------------
Text 27:
RustforLinuxcould advise builders to use the stableRustcompiler, but just tell it to pretend it isn't a stableRustcompiler (one environment variable change), so as to take advantage of any QA benefits as presumably your distribution's stableRust1.62 compiler was actually tested
-------------------------------
Text 28:
RustforLinuxneeds some unstable features.RustforLinuxtracks what is needed, since it is their long term goal that this will become unnecessary:  https://github.com/Rust-for-Linux/linux/issues/2  
 
Note that - while this is not a supported configuration - the stableRustcompiler is technically quite capable of compiling code using
-------------------------------
Text 29:
Building theRustsupport requires specific versions of theRustcompiler
and bindgen utility — specifically,Rust1.62.0 and bindgen 0.56.0.  If the
target system has newer versions, the configuration process will emit
warnings but will proceed anyway.  More awkwardly for anybody who is trying
to do the 
build with theRusttoolchain provided by their distributor, the build
process also needs theRuststandard library source so that it can build
its own version of thecoreandalloccrates.  Until
distributors start shipping "Rustfor the kernel" packages, getting that code
into a place where the build process will find it will be a bit awkward.
-------------------------------
Text 30:
Somewhat related news: The developer of rustc_codegen_gcc recently announced that it can now buildRustforLinux:  https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report...
-------------------------------
Text 31:
The first step toward those goals was to create a parser for the language, then to start
implementingRust's data structures.  Then came traits and generics; those
features are complex, he said, but they are also at the core of how the language
works.  Control flow, and especially thematchexpression 
came next; after that was macro expansion.
Const generics are in progress now, he said, while work on intrinsics and
built-ins is just beginning.  No work has been done on borrow checking; it
is not needed to generate validRustcode, so it can come later.  Work on
running theRusttest suite is also being done.
-------------------------------
Text 32:
Experimental support for theRustprogramming language has beenpulledinto
     the mainline.  Following thedecisions
     madeat the recently concluded
     kernel maintainers summit, this is a
     minimal version of the patch set, without 
     the drivers that have been implemented inRustso far.This documentation
     commitcontains more information, andsome small sample
     modulesare available as well.
-------------------------------
Text 33:
Doing great things is part of the kernel community's job description,
though.  The 6.1 development cycle is about to start as of this writing;
there are currently just over 10,000 non-merge commits waiting inlinux-next.  That suggests that 6.1 may not be the busiest development
cycle ever, but that kernel, which will be a long-term-support release,
will still contain a lot of interesting work, including the expected
merging of theRust-for-Linuxandmulti-generational LRUpatch sets.
That release can be expected in 
mid-December; LWN will, of course, stay on top of what's happening
throughout that development cycle.
-------------------------------
Text 34:
efforts therustpeople are going to forlinux, and also given Linus' very pragmatic not purist attitude, stuff thatlinuxwants is not likely to suffer too much bikeshedding. Even if it does (quite likely) end up as "this only exists in unsafe code".) 
 
Cheers, 
Wol
-------------------------------
Text 35:
Linuxto be written inRustsince inRusttypes with zero size are a completely unremarkable idea we use all the time :D 
 
But yes, I think Clang relenting makes the most sense. Zero Size Types are good. Standard C and C++ can't have them without ripping
-------------------------------
Text 36:
How? By the timeRustwill be used for anything other than toy drivers,Rust-GCC should be done, soLinuxwithRustwill compile anywhere thatLinuxwithoutRustcan.
-------------------------------
Text 37:
The next steps forRustin the kernel:
     the ability to write kernel modules in theRustlanguage may be coming
     sooner that some people expect.
-------------------------------
Text 38:
Greg Kroah-Hartman asked how subsystem-specificRustbindings will go
upstream; will they go through theRusttree or via the relevant subsystem
maintainers?  Ojeda answered that coreRustsupport will go through theRusttree, but the rest should go through maintainers.  Alexei Starovoitov
worried that subsystem maintainers would not be able to refuseRustpatches
even if they do not want to seeRustused in their subsystems; James
Bottomley added thatRustcan be a hard language for longtime C developers
to understand, and that it would not be good to force it on maintainers.
Torvalds answered that it should be up to the maintainers; there is no need
for global rules at this point.
-------------------------------
Text 39:
Rust, such as the original motivating example of Firefox, librsvg, curl, and this work in theLinuxkernel, than I have in Ada. 

 The biggest problem of Ada IMO is that it was always supposed to be about safety, but it never addressed the most common source of bugs: pointer
-------------------------------
Text 40:
Rustexpert).  
 
Fair enough! I'm not an Ada expert either, so I can't necessarily speak to how the approaches compare. 
 
I can say that I've seen a lot more work in the free software world to incrementally port portions of software toRust, such as the original motivating example of Firefox, librsvg, curl, and this work in theLinux
-------------------------------
Text 41:
Rustreference, there's an extensive test suite, there's the entirety of crates.io which is used as an additional test suite, and there's a draft Ferrocene Language Specification  https://spec.ferrocene.dev/  which is intended to provide a set of requirements that can be verified against for safety-critical applications. 
 
 >Rustdoes need to adopt a similar approach where there is no more *the* leading implementation and a few others trying to catch up like clang does with gcc or gnugo does with Go  
 
I'm not sure I follow; as you're saying here, the situation forRustis no different than the situation with C in theLinux
-------------------------------
Text 42:
Rust, and the kernel is far more complicated than that. The one serious attempt to do so failed after months of work because it required writing thousands upon thousands of lines of memory management boilerplate.
 
In fact, the developer of wayland-rs rebutted this  two years ago , and both wayland-rs and smithay (an alternative to wlroots -- not wayland -- inrust) are actively maintained today. Not in wide use (gnome/libweston dominates, kde and wlroots are a distant second/third, not much space for others). But it's there. Perhaps you are thinking of weston-rs. 
 Many of your other comments -- such as they are, omitting the "yeah right", "anyone notice that..." etc -- have been amply rebutted by others above. 
 As far as the kernel is concerned, if there was a huge issue withLinux
-------------------------------
Text 43:
Rust: as long as it remains the self-defined input of rustc, it's not exactly a language and it can seriously fail over time. Serious implementations are absolutely required for it to survive. For sureLinuxuses GCC C. But C is used everywhere and runs the whole
-------------------------------
Text 44:
Rustand C? Obviously the fault of C.  
 
The fundamental unique feature ofRustis that it enables you to build safe abstractions around unsafe code (we'll get to what "safe" means in a bit). Whether you are interfacing with C, or defining your own primitives inRust, doing that can be tricky, but once it's done, you have fairly strong guarantees on what can happen in the safe code that uses those abstractions. 
 
So, this isn't "blaming bugs on C", but just an acknowledgement thatRustis not a silver bullet (and has never been intended as such), and that the fundamental work of building safe abstractions over unsafe code still requires care. Since there are a large number of abstractions that already exist in theLinux
-------------------------------
Text 45:
Rustprevents' (if you don't use `unsafe`, which theRustforlinuxcode does all over the place)? When people involved inRust's development realised just before the release of the language that the language was fundamentally unsound, allowing memory leaks, they quietly redefined 'safety' to exclude leak
-------------------------------
Text 46:
Rusthad been achieved; has there been, for example, any fuzz testing of the server? Almeida answered that theRust-based parsing interface makes a lot of mistakes impossible. No fuzz testing has been done — the server has only been working for a couple of weeks — but he will do it. He concluded that he will be interested to see how his server fares in such testing relative to the QEMU implementation.   
 
In other words "no we haven't actually tested it but I'm sure the language prevents bugs, they're totally impossible". Yeah right. This is typical of theRustcommunity: huge promises, no evidence to back them up, all topped off with an "if it compiles it is correct" attitude that totally disregards that there are many more issues other than those theRustpeople have decided count as 'safety'.  
 
Anyone noticed that 'unsafe' as a general concept has suddenly been redefined to mean 'whateverRustprevents' (if you don't use `unsafe`, which theRustforlinux
-------------------------------
Text 47:
Rust's tier support list says armv4t-none-eabi has tier 3. That platform is described as ARMv4 with Thumb and exists particularly to make the Nintendo Gameboy Advance work. 
 
Tier 3 meansRust's CI checks this compiles, but they don't check it works, and it is only supplied with the core library. 
 
Obviously the kernel is comfortable in that world, you can't just TcpStream::connect() from inside the kernel either, although it won't fit on a GBA as I understand it, presumably if you've got a big enough ARMv4 system to runLinux
-------------------------------
Text 48:
Rust's networking related data structures are literally identical to the C structures, and so I can just pointLinuxC code doing low-level networking at theRuststructures and it'll work" and one day that stopped working. That was never guaranteed to work, nobody
-------------------------------
Text 49:
RustSIMD intrinsics have been implemented.   
 
So it appears them are compiling the SIMD themselves, and bypassing LLVM and GCC's SIMD support, both of which were pretty good except for that no languages could really use them (I gave a talk about this at the 2019 LLVM conference, and wrote a patch series for Zig that only about half of it ever got merged, but I would still recommend Zig over C for this, as C's extensions have some problems that cannot be fixed except by starting over from C11.) 
 
 > many developers are concerned by the fact that there is only one compiler available;   
 
I don't think 10 independent C++ compilers would be enough to convince Linus to allow C++ inLinux
-------------------------------
Text 50:
Rustadoption in the Kernel and another two years until the stale distros actually pick up those kernels, I think most of these will be long gone from theLinuxtree by the time this is relevant. Or have LLVM backends. Cadence and Synopsys certainly don't lack the resources
-------------------------------
Text 51:
There is in fact a port ofrustto m68k, but only onlinux.
-------------------------------
Text 52:
which is mostly kept alive for recreational purposes, is already supported upstream. All of these are going to be primitive enough that I don't think the lack ofrustsupport will be relevant for a long long while. Unless it becomes impossible to compileLinuxwithoutrustat all.
-------------------------------
Text 53:
Cohen talked about building theRustforLinuxproject(the
integration ofRustwith 
theLinuxkernel) specifically.  That project is currently targetingRust1.62, which is rather more recent than the 1.49 that gccrs is aiming at;
there is thus a fair amount of ground yet to cover even once gccrs hits
its target.  There are not many differences in the language itself, he
said, but there are more in the libraries.  Even with the official
compiler,RustforLinuxhas to set theRUST_BOOTSTRAPvariable to
gain access to unstable features; gccrs is trying to implement the ones
that are needed for the kernel.Generic
associated typesare also needed.
Eventually, the goal is for gccrs to be able to compileRustforLinux.
-------------------------------
Text 54:
